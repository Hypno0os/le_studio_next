const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

const prisma = new PrismaClient()

async function resetAdminPassword() {
  try {
    // V√©rifier si l'utilisateur admin existe
    const existingUser = await prisma.user.findUnique({
      where: { email: 'admin@lestudiosport.fr' }
    })

    if (!existingUser) {
      console.log('‚ùå Utilisateur admin non trouv√©')
      return
    }

    console.log('üë§ Utilisateur trouv√©:', existingUser.email)

    // Cr√©er un nouveau mot de passe hash√©
    const newPassword = 'admin123'
    const hashedPassword = await bcrypt.hash(newPassword, 12)

    // Mettre √† jour le mot de passe
    const updatedUser = await prisma.user.update({
      where: { email: 'admin@lestudiosport.fr' },
      data: {
        password: hashedPassword
      }
    })

    console.log('‚úÖ Mot de passe r√©initialis√© avec succ√®s:')
    console.log('   Email:', updatedUser.email)
    console.log('   Nouveau mot de passe:', newPassword)
    console.log('   Hash g√©n√©r√©:', hashedPassword.substring(0, 20) + '...')

    // Tester la v√©rification du mot de passe
    const isValid = await bcrypt.compare(newPassword, hashedPassword)
    console.log('   Test de v√©rification:', isValid ? '‚úÖ OK' : '‚ùå √âCHEC')

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©initialisation:', error)
  } finally {
    await prisma.$disconnect()
  }
}

resetAdminPassword() 