import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { cookies } from 'next/headers'

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ D√©but de la d√©connexion...')
    
    const cookieStore = await cookies()
    const sessionToken = cookieStore.get('studio_session')?.value
    
    console.log('üìã Token de session trouv√©:', sessionToken ? 'Oui' : 'Non')

    if (sessionToken) {
      // Supprimer la session de la base de donn√©es
      try {
        const deletedSessions = await prisma.session.deleteMany({
          where: { token: sessionToken }
        })
        console.log('üóëÔ∏è Sessions supprim√©es de la DB:', deletedSessions.count)
      } catch (dbError) {
        console.error('‚ùå Erreur suppression session DB:', dbError)
        // Continuer m√™me si la suppression DB √©choue
      }
    }

    // Cr√©er la r√©ponse de d√©connexion
    const response = NextResponse.json({ 
      message: 'D√©connexion r√©ussie',
      success: true
    })

    // Supprimer le cookie de session principal
    response.cookies.set('studio_session', '', {
      httpOnly: true,
      path: '/',
      expires: new Date(0),
      maxAge: 0,
      sameSite: 'lax',
      secure: process.env.NODE_ENV === 'production',
    })

    // Supprimer le token CSRF
    response.cookies.set('csrf_token', '', {
      httpOnly: true,
      path: '/',
      expires: new Date(0),
      maxAge: 0,
      sameSite: 'lax',
      secure: process.env.NODE_ENV === 'production',
    })

    // Ajouter des headers pour forcer la suppression des cookies
    response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate')
    response.headers.set('Pragma', 'no-cache')
    response.headers.set('Expires', '0')

    console.log('‚úÖ D√©connexion termin√©e avec succ√®s')
    return response
    
  } catch (error) {
    console.error('‚ùå Erreur d√©connexion:', error)
    return NextResponse.json(
      { message: 'Erreur lors de la d√©connexion', success: false },
      { status: 500 }
    )
  }
} 