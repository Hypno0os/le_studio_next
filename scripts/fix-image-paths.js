const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function fixImagePaths() {
  try {
    console.log('üîß Correction des chemins d\'images dans la base de donn√©es...\n')

    // 1. R√©cup√©rer tous les articles avec du contenu HTML
    console.log('1Ô∏è‚É£ R√©cup√©ration des articles...')
    const articles = await prisma.blogArticle.findMany({
      where: {
        content: {
          contains: '../uploads/'
        }
      },
      select: {
        id: true,
        title: true,
        content: true
      }
    })

    console.log(`‚úÖ ${articles.length} articles trouv√©s avec des chemins d'images √† corriger`)

    if (articles.length === 0) {
      console.log('‚úÖ Aucun article √† corriger')
      return
    }

    // 2. Corriger les chemins dans chaque article
    console.log('\n2Ô∏è‚É£ Correction des chemins d\'images...')
    let correctedCount = 0

    for (const article of articles) {
      console.log(`\nüìù Article: "${article.title}"`)
      
      let originalContent = article.content
      let correctedContent = originalContent

      // Remplacer les chemins relatifs par des chemins absolus
      correctedContent = correctedContent.replace(
        /\.\.\/uploads\//g,
        '/uploads/'
      )

      // V√©rifier s'il y a eu des changements
      if (correctedContent !== originalContent) {
        try {
          await prisma.blogArticle.update({
            where: { id: article.id },
            data: { content: correctedContent }
          })
          
          console.log(`   ‚úÖ Chemins corrig√©s`)
          correctedCount++
          
          // Afficher les changements
          const changes = originalContent.match(/\.\.\/uploads\/[^"'\s>]+/g) || []
          changes.forEach(change => {
            const newPath = change.replace('../uploads/', '/uploads/')
            console.log(`      ${change} ‚Üí ${newPath}`)
          })
          
        } catch (error) {
          console.log(`   ‚ùå Erreur lors de la correction: ${error.message}`)
        }
      } else {
        console.log(`   ‚è≠Ô∏è  Aucun changement n√©cessaire`)
      }
    }

    // 3. V√©rifier les images dans la table BlogImage
    console.log('\n3Ô∏è‚É£ V√©rification des images dans la table BlogImage...')
    const images = await prisma.blogImage.findMany({
      where: {
        filePath: {
          startsWith: '../uploads/'
        }
      },
      select: {
        id: true,
        filePath: true,
        fileName: true
      }
    })

    console.log(`‚úÖ ${images.length} images trouv√©es avec des chemins √† corriger`)

    if (images.length > 0) {
      for (const image of images) {
        const newFilePath = image.filePath.replace('../uploads/', '/uploads/')
        
        try {
          await prisma.blogImage.update({
            where: { id: image.id },
            data: { filePath: newFilePath }
          })
          
          console.log(`   ‚úÖ ${image.fileName}: ${image.filePath} ‚Üí ${newFilePath}`)
          correctedCount++
          
        } catch (error) {
          console.log(`   ‚ùå Erreur pour ${image.fileName}: ${error.message}`)
        }
      }
    }

    // 4. V√©rifier les featuredImage
    console.log('\n4Ô∏è‚É£ V√©rification des images de couverture...')
    const featuredImages = await prisma.blogArticle.findMany({
      where: {
        featuredImage: {
          startsWith: '../uploads/'
        }
      },
      select: {
        id: true,
        title: true,
        featuredImage: true
      }
    })

    console.log(`‚úÖ ${featuredImages.length} images de couverture √† corriger`)

    if (featuredImages.length > 0) {
      for (const article of featuredImages) {
        const newFeaturedImage = article.featuredImage.replace('../uploads/', '/uploads/')
        
        try {
          await prisma.blogArticle.update({
            where: { id: article.id },
            data: { featuredImage: newFeaturedImage }
          })
          
          console.log(`   ‚úÖ "${article.title}": ${article.featuredImage} ‚Üí ${newFeaturedImage}`)
          correctedCount++
          
        } catch (error) {
          console.log(`   ‚ùå Erreur pour "${article.title}": ${error.message}`)
        }
      }
    }

    // 5. R√©sum√©
    console.log('\nüéâ Correction termin√©e !')
    console.log(`üìä R√©sum√©:`)
    console.log(`   ‚Ä¢ Articles trait√©s: ${articles.length}`)
    console.log(`   ‚Ä¢ Images BlogImage trait√©es: ${images.length}`)
    console.log(`   ‚Ä¢ Images de couverture trait√©es: ${featuredImages.length}`)
    console.log(`   ‚Ä¢ Total des corrections: ${correctedCount}`)

    // 6. Test de v√©rification
    console.log('\n6Ô∏è‚É£ Test de v√©rification...')
    const remainingIssues = await prisma.blogArticle.findMany({
      where: {
        OR: [
          { content: { contains: '../uploads/' } },
          { featuredImage: { startsWith: '../uploads/' } }
        ]
      },
      select: {
        id: true,
        title: true
      }
    })

    if (remainingIssues.length === 0) {
      console.log('‚úÖ Aucun probl√®me restant d√©tect√©')
    } else {
      console.log(`‚ö†Ô∏è  ${remainingIssues.length} articles avec des probl√®mes restants:`)
      remainingIssues.forEach(issue => {
        console.log(`   ‚Ä¢ ${issue.title} (ID: ${issue.id})`)
      })
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter le script
fixImagePaths() 